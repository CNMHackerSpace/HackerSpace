@inject CustomHttpClient http
@inject ILogger<EvaluatorSelectorComponent> logger

<Modal @ref="modalRef">
    <ModalContent Centered Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>Select Evaluators</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            @if (EvaluatorSelections is null)
            {
                <p>Loading...</p>
            }
            else
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col">Email</th>
                            <th scope="col">Firstname</th>
                            <th scope="col">Lastname</th>
                            <th scope="col">Blocked</th>
                            <th scope="col">Select</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var user in EvaluatorSelections)
                        {
                            <tr>
                                <th scope="row">@user.Dto.Email</th>
                                <td>@user.Dto.FirstName</td>
                                <td>@user.Dto.LastName</td>
                                <td>@user.Dto.Blocked</td>
                                <td><Check TValue="bool" @bind-Checked="user.Selected">Check me out</Check></td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@OnCancelClick">Cancel</Button>
            <Button Color="Color.Primary" Clicked="@OnSaveClick">Save Changes</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
<button class="btn btn-primary" type="button" @onclick="ShowModal">Edit Evaluators List</button>

@code {
    [Parameter]
    public Shared.Models.Badge? Badge { get; set; }
    [Parameter]
    public List<string> Evaluators { get; set; } = new List<string>();

    private Modal? modalRef;

    private List<EvaluatorSelection> EvaluatorSelections = new List<EvaluatorSelection>();

    protected override async Task OnInitializedAsync()
    {
        IEnumerable<UserDto.Index>? users = await http.Secure.GetFromJsonAsync<UserDto.Index[]>("api/Users");
        EvaluatorSelections.Clear();
        if (users != null)
        {
            foreach (var user in users)
            {
                EvaluatorSelection selection = new EvaluatorSelection
                    {
                        Dto = user,
                        Selected = Evaluators?.Contains(user.UserId) ?? false
                    };
                EvaluatorSelections.Add(selection);
            }
        }

        StateHasChanged();
    }

    private async Task ShowModal()
    {
        if (modalRef != null) await modalRef.Show();
    }

    private async Task OnSaveClick()
    {
        Evaluators.Clear();
        foreach (var evaluator in EvaluatorSelections.Where(e => e.Selected))
        {
            Evaluators?.Add(evaluator.Dto.UserId);
        }
        

        if (modalRef != null) await modalRef.Hide();
    }

    private async Task OnCancelClick()
    {
        if (modalRef != null) await modalRef.Hide();
    }
}

