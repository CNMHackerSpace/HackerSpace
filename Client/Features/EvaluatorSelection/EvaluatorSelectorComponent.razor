@inject CustomHttpClient http
@inject ILogger<EvaluatorSelectorComponent> logger

<EvaluatorModal @ref="Modal"></EvaluatorModal>
<button class="btn btn-primary" type="button" @onclick="()=>Modal?.Open()">Edit Evaluators List</button>

@code {
    [Parameter]
    public Shared.Models.Badge? Badge { get; set; }
    [Parameter]
    public List<string> Evaluators { get; set; } = new List<string>();

    private EvaluatorModal? Modal;

    private List<EvaluatorSelection> EvaluatorSelections = new List<EvaluatorSelection>();

    protected override async Task OnInitializedAsync()
    {
        IEnumerable<UserDto.Index>? users = await http.Secure.GetFromJsonAsync<UserDto.Index[]>("api/Users");
        EvaluatorSelections.Clear();
        if (users != null)
        {
            foreach (var user in users)
            {
                if(user.UserId!=null)
                {
                    EvaluatorSelection selection = new EvaluatorSelection
                    {
                        Dto = user,
                        Selected = Evaluators?.Contains(user.UserId) ?? false
                    };
                    EvaluatorSelections.Add(selection);
                }                
            }
        }

        StateHasChanged();
    }

    private void ShowModal()
    {
        //if (modalRef != null) await modalRef.Show();
    }

    private void OnSaveClick()
    {
        Evaluators.Clear();
        foreach (var evaluator in EvaluatorSelections.Where(e => e.Selected == true))
        {
            Evaluators?.Add(evaluator?.Dto?.UserId??"");
        }
        

        //if (modalRef != null) await modalRef.Hide();
    }

    private void OnCancelClick()
    {
        //if (modalRef != null) await modalRef.Hide();
    }
}

