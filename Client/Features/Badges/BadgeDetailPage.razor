@page "/Badge/{Id:int}"

@using Shared.Models
@using System.Net.Http.Headers;
@inject CustomHttpClient http
@inject NavigationManager navManager
@inject IJSRuntime JS

@if (Badge == null)
{
    <p>
        ...loading badge information &nbsp;
        <img src="/images/Spur_gears_animation_blue_small.gif" height="30" />
    </p>
}
else
{
    <AuthorizeView Roles="admin, badgecreator">
        <Authorized>
            <button type="button" class="btn btn-primary btn-sm" @onclick="ToggleEditMode">@(ShowAsUser ? "Switch to Edit Mode" : "Show as user")</button>
            <span hidden="@(!ShowAsUser)">
                <BadgeComponent Badge="Badge" />
            </span>
            <span hidden="@ShowAsUser">
                <BadgeEditComponent Badge="Badge" />
            </span>
        </Authorized>
        <NotAuthorized>
            <BadgeComponent Badge="Badge" />
        </NotAuthorized>
    </AuthorizeView>
}

@code {
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public bool ShowAsUser { get; set; } = true;

    private Shared.Models.Badge? Badge { get; set; } 

    protected async override Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (Id == 0)
        {
            Badge = new();
        }
        else
        {
            Badge = await http.Anonymous.GetFromJsonAsync<Shared.Models.Badge>($"/api/Badges/{Id}") ?? new();
        }
    }
    private void ToggleEditMode()
    {
        ShowAsUser = !ShowAsUser;
        StateHasChanged();
    }

    //private void OnSwitchToEditModeButtonClick()
    //{
    //    ShowAsUser = false;
    //    StateHasChanged();
    //}

    //private void OnShowAsUserModeButtonClick()
    //{
    //    ShowAsUser = true;
    //    StateHasChanged();
    //}
}
