@page "/Badge/{Id:int}"

@using Shared.Models
@using System.Net.Http.Headers;
@inject CustomHttpClient http
@inject NavigationManager navManager
@inject IJSRuntime JS

@if (_badge == null)
{
    <p>
        ...loading badge information &nbsp;
        <img src="/images/Spur_gears_animation_blue_small.gif" height="30" />
    </p>
}
else
{
    <AuthorizeView Roles="admin, badgecreator">
        <Authorized>
            <div class="mb-3">
                <img src="UploadedImages/@_badge.FileName" height="50" />
                <FileEdit Filter="image/jpeg, image/png, image/gif" Changed="@OnBadgeImageChanged" />
            </div>
            <div class="mb-3">
                <label for="titleInput" class="form-label">Title</label>
                <input type="text" class="form-control" id="titleInput" @bind="_badge.Title" placeholder="Title">
            </div>
            <div class="mb-3">
                <label for="descriptionInput" class="form-label">Description (Describe the skill associated with this badge)</label>
                <Markdown @ref="DescriptionMarkdown" class="form-control" id="descriptionInput" @Value="descriptionMarkdown" @*ValueChanged="@OnDescriptionMarkdownValueChanged" *@ />
            </div>
            <div class="mb-3">
                <label for="turnInInstructionsInput" class="form-label">Turn in instructions (Describe what to do to turn in work to be evaluated. Make sure you include what email or teams page to turn work into.)</label>
                <Markdown @ref="TurnInInstructionsMarkdown" class="form-control" id="turnInInstructionsInput" @Value="turnInInstructionsMarkdown" @*ValueChanged="@OnTurnInInstructionsMarkdownValueChanged" *@ />
            </div>
            <div class="mb-3">
                <button class="btn btn-primary" type="button" @onclick="OnSaveChangesClickedAsync">Save Changes</button>
                <button class="btn btn-danger" type="button" @onclick="OnCancelChangesClickedAsync">Discard Changes</button>
            </div>
        </Authorized>
        <NotAuthorized>
            <BadgeComponent Badge="_badge" />
        </NotAuthorized>
    </AuthorizeView>

    <p>
        @((MarkupString)messageToUser)
    </p>
}



@code {
    [Parameter]
    public int Id { get; set; }
    private Shared.Models.Badge _badge = new();
    bool showImage = true;
    bool isDisabled = false;
    string testMessage = "";
    private IList<UploadResult> uploadResults = new List<UploadResult>();
    private string messageToUser = "";
    Blazorise.Markdown.Markdown? DescriptionMarkdown { get; set; }
    string descriptionMarkdownText = "";
    Blazorise.Markdown.Markdown? TurnInInstructionsMarkdown { get; set; }
    string turnInInstructionsMarkdownText = "";

    protected async override Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (Id == 0)
        {
            _badge = null;
        }
        else
        {
            if (Id == -1)
            {
                _badge = new();
            }
            else
            {
                _badge = await http.Anonymous.GetFromJsonAsync<Shared.Models.Badge>($"/api/Badges/{Id}") ?? new();
            }
            descriptionMarkdownText = _badge.Description;
            turnInInstructionsMarkdownText = _badge.TurnInInstructions;
            if (DescriptionMarkdown != null)
            {
                await DescriptionMarkdown.SetValueAsync(descriptionMarkdownText);
            }
            if (TurnInInstructionsMarkdown != null)
            {
                await TurnInInstructionsMarkdown.SetValueAsync(turnInInstructionsMarkdownText);
            }
            StateHasChanged();
        }
    }

    protected async Task OnSaveChangesClickedAsync()
    {
        try
        {
            _badge.Description = await DescriptionMarkdown.GetValueAsync();
            _badge.TurnInInstructions = await TurnInInstructionsMarkdown.GetValueAsync();
            if (_badge.Id == 0)
            {
                var result = await http.Secure.PostAsJsonAsync<Shared.Models.Badge>($"/api/Badges/", _badge);
                if(result.IsSuccessStatusCode)
                {
                    messageToUser += "<p>Badge added</p>";
                }
                else
                {
                    messageToUser += $"<p>Badge not added {result.ReasonPhrase}</p>";
                }
            }
            else
            {
                var result = await http.Secure.PutAsJsonAsync<Shared.Models.Badge>($"/api/Badges/", _badge);
                if (result.IsSuccessStatusCode)
                {
                    messageToUser += $"<p>Badge updated {result.ReasonPhrase}</p>";
                }
                else
                {
                    messageToUser += $"<p>Badge not updated {result.ReasonPhrase}</p>";
                }
            }
            //navManager.NavigateTo("/badges");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    protected async Task OnCancelChangesClickedAsync()
    {
        navManager.NavigateTo("/badges");
        await Task.CompletedTask;
    }

    private async Task OnBadgeImageChanged(FileChangedEventArgs e)
    {
        try
        {
            messageToUser += $"<p>Number of files: {e.Files.Count()}</p>";
            var file = e.Files[0];
            long maxFileSize = 1024 * 1024;
            if (file.Size > maxFileSize)
            {
                messageToUser += "<p>File too large</p>";
                return;
            }
            using var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));

            fileContent.Headers.ContentType =
                new MediaTypeHeaderValue(file.Type);

            content.Add(
                content: fileContent,
                name: "\"files\"",
                fileName: file.Name);

            var response = await http.Secure.PostAsync("/api/Filesave", content);

            uploadResults = await response.Content.ReadFromJsonAsync<IList<UploadResult>>() ?? new List<UploadResult>();
            if (uploadResults.Count > 0)
            {
                _badge.FileName = uploadResults[0].StoredFileName ?? "";
                messageToUser += $"<p>File uploaded: {_badge.FileName}</p>";
            }
            else
            {
                messageToUser += $"<p>File upload problem: </p><p>UploadResults.Count: {uploadResults.Count}</p>";
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}
