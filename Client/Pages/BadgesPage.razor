@page "/Badges"
@using Shared.Models;
@using Shared.ViewModels;
@using System.Security.Claims

@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
<h3>Badges</h3>

@if(_badgesVM.Badges.Count() == 0)
{
    <p>No badges in database at this time.</p>
}
else
{
@foreach(Badge badge in _badgesVM.Badges)
    {
        <p><a href="/Badge/@badge.Id"><img src="images/@badge.FileName" height="50"/>   @badge.Title</a></p>
    }
}
<AuthorizeView>
    <Authorized>Badge creation buttons</Authorized>
    <NotAuthorized>Not badge creator</NotAuthorized>
</AuthorizeView>
@code {
    private BadgesViewModel _badgesVM = new BadgesViewModel();

    protected async override Task OnInitializedAsync()
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var claims = user.Claims.ToList();
        string? sub = claims.Find(c => c.Type == "sub")?.Value;
        string? email = claims.Find(c => c.Type == "emails")?.Value;
        //string? isadmin = claims.Find(c => c.Type == "isadmin")?.Value;

        await base.OnInitializedAsync();
        if (user.Identity?.IsAuthenticated==true)
        {
            var http = HttpClientFactory.CreateClient();
            _badgesVM = await http.GetFromJsonAsync<BadgesViewModel>(@"https://localhost:7018/api/Badges/ViewModel/") ?? new BadgesViewModel();
            if(_badgesVM == null)
            {
                _badgesVM = new BadgesViewModel();
            }
        }
    }
}
