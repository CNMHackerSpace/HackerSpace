@page "/Badge/{Id:int}"
@using Shared.Models
@inject HttpClient http
@inject NavigationManager navManager

@if (_badge == null)
{
    <p>...loading badge information &nbsp; <img src="/images/Spur_gears_animation_blue_small.gif" height="30"/></p>
}
else
{
    <AuthorizeView Roles = "admin, badgecreator">
        <Authorized>
            <div class="mb-3">
              <label for="titleInput" class="form-label">Title</label>
              <input type="text" class="form-control" id="titleInput" @bind = "_badge.Title" placeholder="Title">
            </div>
@*            <div class="mb-3">
                <label for="trailImage" class="font-weight-bold text-secondary">
                    Image
                </label>
                <InputFile OnChange="LoadTrailImage" class="form-control-file"
                           id="trailImage" accept=".png,.jpg,.jpeg" />
            </div>*@
            <div class="mb-3">
                <div class="custom-file">
                    <InputFile class="custom-file-input" multiple OnChange="OnChange" accept="image/png, image/jpeg, image/gif" id="inputFile" />
                    <label class="custom-file-label" for="inputFile">Choose file</label>
                </div>
                <div class="input-group-append">
                    <button class="btn btn-success" @onclick="Upload" disabled="@isDisabled">Upload</button>
                </div>
            </div>
            <div class="mb-3">
              <label for="descriptionInput" class="form-label">Description (Describe the skill associated with this badge)</label>
                <Markdown class="form-control" id="descriptionInput" Value="@_badge.Description" ValueChanged="@OnDescriptionMarkdownValueChanged" />
            </div>
            <div class="mb-3">
                <label for="turnInInstructionsInput" class="form-label">Turn in instructions (Describe what to do to turn in work to be evaluated. Make sure you include what email or teams page to turn work into.)</label>
                <Markdown class="form-control" id="turnInInstructionsInput" Value="@_badge.TurnInInstructions" ValueChanged="@OnDescriptionMarkdownValueChanged" />
            </div>
            <div class="mb-3">
                <button class="btn btn-primary" type="button" @onclick="OnSaveChangesClickedAsync">Save Changes</button>
                <button class="btn btn-danger" type="button">Discard Changes</button>
            </div>
        </Authorized>
        <NotAuthorized>
            <h3>@_badge.Title</h3>
            <p><img src="images/@_badge.FileName" height="100" /> </p>
            <h2>Description</h2>
            <p>@((MarkupString)Markdig.Markdown.ToHtml(_badge.Description))</p>
            <h2>Turn in instructions</h2>
            <p>@((MarkupString)Markdig.Markdown.ToHtml(_badge.TurnInInstructions))</p>
        </NotAuthorized>
    </AuthorizeView>
}



@code {
    [Parameter]
    public int Id { get; set; }
    private Badge _badge;

    protected async override Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (Id == 0)
        {
            _badge = new Badge();
        }
        else
        {
            _badge = await http.GetFromJsonAsync<Badge>($"/api/Badges/{Id}") ?? new Badge();
        }
    }

    protected Task OnDescriptionMarkdownValueChanged( string value )
    {
        _badge.Description = value;
        return Task.CompletedTask;
    }

    protected Task OnTurnInInstructionsMarkdownValueChanged(string value)
    {
        _badge.TurnInInstructions = value;
        return Task.CompletedTask;
    }

    protected async Task OnSaveChangesClickedAsync()
    {
        if (_badge.Id == 0)
        {
            await http.PostAsJsonAsync<Badge>($"/api/Badges/",_badge);
        }
        else
        {
            await http.PutAsJsonAsync<Badge>($"/api/Badges/", _badge);
        }
        navManager.NavigateTo("/badges");
    }

    private IBrowserFile? _trailImage;  

    private void LoadTrailImage(InputFileChangeEventArgs e)
    { 
         _trailImage = e.File;
    }

    ImageFile imageFile = new ImageFile();
    bool isDisabled = false;

    async Task OnChange(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles(); // get the files selected by the users
        foreach (var file in files)
        {
            var resizedFile = await file.RequestImageFileAsync(file.ContentType, 640, 480); // resize the image file
            var buf = new byte[resizedFile.Size]; // allocate a buffer to fill with the file's data
            using (var stream = resizedFile.OpenReadStream())
            {
                await stream.ReadAsync(buf); // copy the stream to the buffer
            }
            imageFile = new ImageFile { base64data = Convert.ToBase64String(buf), contentType = file.ContentType, fileName = file.Name }; // convert to a base64 string!!
        }
    }

    async Task Upload()
    {
        isDisabled = true;
        using (var msg = await http.PostAsJsonAsync<ImageFile>("/api/upload", imageFile, System.Threading.CancellationToken.None))
        {
            isDisabled = false;
            if (msg.IsSuccessStatusCode)
            {
                imageFile = new ImageFile();
            }
        }
    }
}
