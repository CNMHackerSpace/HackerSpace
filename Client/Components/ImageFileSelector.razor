@using Blazorise
@using Shared.Models;
@*Uses Blazored modal: https://github.com/Blazored/Modal*@
@inject IJSRuntime JS
@inject HttpClient Http

<div class="modal fade show d-block" tabindex="-1" role="dialog">
    <div class="modal-backdrop fade show" @onclick="OnCancelClick"></div>
    <div class="modal-dialog" style="z-index: 1050">
        <!-- Pop it above the backdrop -->
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Modal title</h5>
            </div>
            <div class="modal-body">

                <FilePicker Upload="OnFileUpload" ShowMode="FilePickerShowMode.List" />
                <img style="max-width:100px;max-height:100px" @ref="previewImageElem" />

       
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="OnSubmitClick">Submit</button>
                <button type="button" class="btn btn-danger" @onclick="OnCancelClick">Cancel</button>
            </div>
        </div>
    </div>
</div>
@code {
    private InputFile? inputFile;
    private ElementReference previewImageElem;

    private async Task ShowPreview() => await JS.InvokeVoidAsync(
    "previewImage", inputFile!.Element, previewImageElem);

    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter] public string? Message { get; set; }

    async Task OnSubmitClick() 
    {
        await BlazoredModal.CloseAsync(ModalResult.Ok(true)); 
    }

    async Task OnCancelClick()
    {
        await BlazoredModal.CancelAsync();
    }


    async Task OnFileUpload(FileUploadEventArgs e)
    {
        try
        {
            using (MemoryStream result = new MemoryStream())
            {
                await e.File.OpenReadStream(long.MaxValue).CopyToAsync(result);
            }
        }
        catch (Exception exc)
        {
            Console.WriteLine(exc.Message);
        }
        finally
        {
            this.StateHasChanged();
        }
    }
}
